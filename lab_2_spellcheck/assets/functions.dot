digraph FunctionDependencies {
  rankdir="LR";
  node [shape=box, style=filled, fillcolor="#E0F0FF"];
  main [label="main.py", shape=folder, fillcolor="#FFE0E0"];
  "add_letter" [label="add_letter()"];
  main -> "add_letter";
  "build_vocabulary" [label="build_vocabulary()"];
  main -> "build_vocabulary";
  "calculate_distance" [label="calculate_distance()"];
  main -> "calculate_distance";
  "calculate_frequency_distance" [label="calculate_frequency_distance()"];
  main -> "calculate_frequency_distance";
  "calculate_jaccard_distance" [label="calculate_jaccard_distance()"];
  main -> "calculate_jaccard_distance";
  "calculate_jaro_distance" [label="calculate_jaro_distance()"];
  main -> "calculate_jaro_distance";
  "calculate_jaro_winkler_distance" [label="calculate_jaro_winkler_distance()"];
  main -> "calculate_jaro_winkler_distance";
  "calculate_levenshtein_distance" [label="calculate_levenshtein_distance()"];
  main -> "calculate_levenshtein_distance";
  "count_transpositions" [label="count_transpositions()"];
  main -> "count_transpositions";
  "delete_letter" [label="delete_letter()"];
  main -> "delete_letter";
  "fill_levenshtein_matrix" [label="fill_levenshtein_matrix()"];
  main -> "fill_levenshtein_matrix";
  "find_correct_word" [label="find_correct_word()"];
  main -> "find_correct_word";
  "find_out_of_vocab_words" [label="find_out_of_vocab_words()"];
  main -> "find_out_of_vocab_words";
  "generate_candidates" [label="generate_candidates()"];
  main -> "generate_candidates";
  "get_matches" [label="get_matches()"];
  main -> "get_matches";
  "initialize_levenshtein_matrix" [label="initialize_levenshtein_matrix()"];
  main -> "initialize_levenshtein_matrix";
  "propose_candidates" [label="propose_candidates()"];
  main -> "propose_candidates";
  "replace_letter" [label="replace_letter()"];
  main -> "replace_letter";
  "swap_adjacent" [label="swap_adjacent()"];
  main -> "swap_adjacent";
  "winkler_adjustment" [label="winkler_adjustment()"];
  main -> "winkler_adjustment";
}
