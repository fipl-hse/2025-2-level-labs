digraph "classes_LAB_3_GENERATE_BY_NGRAMS" {
rankdir=BT
charset="utf-8"
"lab_3_generate_by_ngrams.main.BackOffGenerator" [color="black", fontcolor="black", label=<{BackOffGenerator|<br ALIGN="LEFT"/>|run(seq_len: int, prompt: str): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.BackOffGenerator" [color="black", fontcolor="black", label=<{BackOffGenerator|<br ALIGN="LEFT"/>|<I>run</I>(seq_len: int, prompt: str): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.BeamSearchTextGenerator" [color="black", fontcolor="black", label=<{BeamSearchTextGenerator|beam_searcher<br ALIGN="LEFT"/>|run(prompt: str, seq_len: int): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.BeamSearchTextGenerator" [color="black", fontcolor="black", label=<{BeamSearchTextGenerator|<br ALIGN="LEFT"/>|<I>run</I>(prompt: str, seq_len: int): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.BeamSearcher" [color="black", fontcolor="black", label=<{BeamSearcher|<br ALIGN="LEFT"/>|continue_sequence(sequence: tuple[int, ...], next_tokens: list[tuple[int, float]], sequence_candidates: dict[tuple[int, ...], float]): dict[tuple[int, ...], float] \| None<br ALIGN="LEFT"/>get_next_token(sequence: tuple[int, ...]): list[tuple[int, float]] \| None<br ALIGN="LEFT"/>prune_sequence_candidates(sequence_candidates: dict[tuple[int, ...], float]): dict[tuple[int, ...], float] \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.BeamSearcher" [color="black", fontcolor="black", label=<{BeamSearcher|<br ALIGN="LEFT"/>|<I>continue_sequence</I>(sequence: tuple[int, ...], next_tokens: list[tuple[int, float]], sequence_candidates: dict[tuple[int, ...], float]): dict[tuple[int, ...], float] \| None<br ALIGN="LEFT"/><I>get_next_token</I>(sequence: tuple[int, ...]): list[tuple[int, float]] \| None<br ALIGN="LEFT"/><I>prune_sequence_candidates</I>(sequence_candidates: dict[tuple[int, ...], float]): dict[tuple[int, ...], float] \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.GreedyTextGenerator" [color="black", fontcolor="black", label=<{GreedyTextGenerator|<br ALIGN="LEFT"/>|run(seq_len: int, prompt: str): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.GreedyTextGenerator" [color="black", fontcolor="black", label=<{GreedyTextGenerator|<br ALIGN="LEFT"/>|<I>run</I>(seq_len: int, prompt: str): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.NGramLanguageModel" [color="black", fontcolor="black", label=<{NGramLanguageModel|<br ALIGN="LEFT"/>|build(): int<br ALIGN="LEFT"/>generate_next_token(sequence: tuple[int, ...]): dict \| None<br ALIGN="LEFT"/>get_n_gram_size(): int<br ALIGN="LEFT"/>set_n_grams(frequencies: dict): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.NGramLanguageModel" [color="black", fontcolor="black", label=<{NGramLanguageModel|<br ALIGN="LEFT"/>|<I>build</I>(): int<br ALIGN="LEFT"/><I>generate_next_token</I>(sequence: tuple[int, ...]): dict \| None<br ALIGN="LEFT"/><I>get_n_gram_size</I>(): int<br ALIGN="LEFT"/><I>set_n_grams</I>(frequencies: dict): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.NGramLanguageModelReader" [color="black", fontcolor="black", label=<{NGramLanguageModelReader|<br ALIGN="LEFT"/>|get_text_processor(): TextProcessor<br ALIGN="LEFT"/>load(n_gram_size: int): NGramLanguageModel \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.NGramLanguageModelReader" [color="black", fontcolor="black", label=<{NGramLanguageModelReader|<br ALIGN="LEFT"/>|<I>get_text_processor</I>(): TextProcessor<br ALIGN="LEFT"/><I>load</I>(n_gram_size: int): NGramLanguageModel \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.TextProcessor" [color="black", fontcolor="black", label=<{TextProcessor|<br ALIGN="LEFT"/>|decode(encoded_corpus: tuple[int, ...]): str \| None<br ALIGN="LEFT"/>encode(text: str): tuple[int, ...] \| None<br ALIGN="LEFT"/>fill_from_ngrams(content: dict): None<br ALIGN="LEFT"/>get_end_of_word_token(): str<br ALIGN="LEFT"/>get_id(element: str): int \| None<br ALIGN="LEFT"/>get_token(element_id: int): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main_stub.TextProcessor" [color="black", fontcolor="black", label=<{TextProcessor|<br ALIGN="LEFT"/>|<I>decode</I>(encoded_corpus: tuple[int, ...]): str \| None<br ALIGN="LEFT"/><I>encode</I>(text: str): tuple[int, ...] \| None<br ALIGN="LEFT"/><I>fill_from_ngrams</I>(content: dict): None<br ALIGN="LEFT"/><I>get_end_of_word_token</I>(): str<br ALIGN="LEFT"/><I>get_id</I>(element: str): int \| None<br ALIGN="LEFT"/><I>get_token</I>(element_id: int): str \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"lab_3_generate_by_ngrams.main.BeamSearcher" -> "lab_3_generate_by_ngrams.main.BeamSearchTextGenerator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="beam_searcher", style="solid"];
"lab_3_generate_by_ngrams.main.TextProcessor" -> "lab_3_generate_by_ngrams.main.NGramLanguageModelReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_text_processor", style="solid"];
"lab_3_generate_by_ngrams.main.NGramLanguageModel" -> "lab_3_generate_by_ngrams.main.BeamSearchTextGenerator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_language_model", style="solid"];
"lab_3_generate_by_ngrams.main.NGramLanguageModel" -> "lab_3_generate_by_ngrams.main.BeamSearcher" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"lab_3_generate_by_ngrams.main.NGramLanguageModel" -> "lab_3_generate_by_ngrams.main.GreedyTextGenerator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_model", style="solid"];
"lab_3_generate_by_ngrams.main.TextProcessor" -> "lab_3_generate_by_ngrams.main.BackOffGenerator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_text_processor", style="solid"];
"lab_3_generate_by_ngrams.main.TextProcessor" -> "lab_3_generate_by_ngrams.main.BeamSearchTextGenerator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_text_processor", style="solid"];
"lab_3_generate_by_ngrams.main.TextProcessor" -> "lab_3_generate_by_ngrams.main.GreedyTextGenerator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_text_processor", style="solid"];
}
